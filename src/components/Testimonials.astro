---
import "@fontsource/playfair-display/700.css";
import "@fontsource/quicksand";

// Accept content from props
const { content } = Astro.props;

// Log what we received
console.log("üîç testimonials component received:", content);

// Default content if nothing is provided from Strapi
const defaultContent = {
  testimonials: [
    {
      title: "Fallback Title",
      content: [
        "FALLBACK TESTIMONIAL" 
      ],
      author: "Tallulah Adey",
      photo: "/images/tallulah.jpg",
    },
  ],
};

// Use content from Strapi if available, otherwise use defaults
const testimonials = content?.testimonials || defaultContent.testimonials;

console.log("üìù testimonials to render:", testimonials);

// Function to chunk testimonials into groups of 2 for layout
function chunkArray(array: string | any[], size: number) {
  if (!Array.isArray(array)) {
    console.error("‚ùå chunkArray received non-array:", array);
    return [];
  }
  
  const chunked = [];
  for (let i = 0; i < array.length; i += size) {
    chunked.push(array.slice(i, i + size));
  }
  return chunked;
}

const testimonialGroups = chunkArray(testimonials, 2);
console.log(`üìä Created ${testimonialGroups.length} testimonial groups`);
---

<div class="bg-white py-24 sm:py-32 overflow-x-clip">
  <div class="mx-auto max-w-6xl flex">
    <div class="mx-auto max-w-6xl px-6 lg:px-8">
      <!-- Add back the SVG blurred blobs -->
      <div class="relative w-full max-w-lg flex -z-100">
        <div
          class="absolute top-40 -left-1/4 w-1/2 h-1/3 mix-blend-multiply filter blur-2xl opacity-20"
        >
          <svg
            id="10015.io"
            viewBox="0 0 480 480"
            xmlns="http://www.w3.org/2000/svg"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            style="transform: scale(2); "
          >
            <path
              fill="#474bff"
              d="M372.5,277Q369,314,342,341.5Q315,369,277.5,400Q240,431,218.5,373Q197,315,128.5,329.5Q60,344,42.5,292Q25,240,83,211.5Q141,183,132,110.5Q123,38,181.5,50Q240,62,296,53.5Q352,45,340,117Q328,189,352,214.5Q376,240,372.5,277Z"
            ></path>
          </svg>
        </div>
        <div
          class="absolute top-[20%] -right-1/4 w-1/2 h-1/3 opacity-50 mix-blend-multiply filter blur-2xl"
        >
          <svg
            id="10015.io"
            viewBox="0 0 480 480"
            xmlns="http://www.w3.org/2000/svg"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            style="transform: scale(2); "
          >
            <path
              fill="#ffc847"
              d="M388.5,284.5Q394,329,355,350.5Q316,372,278,388Q240,404,197,396Q154,388,152,340Q150,292,92.5,266Q35,240,70,201Q105,162,150.5,162.5Q196,163,218,159.5Q240,156,260.5,163Q281,170,348.5,154Q416,138,399.5,189Q383,240,388.5,284.5Z"
            ></path>
          </svg>
        </div>
      </div>

      {testimonialGroups.length > 0 ? (
        testimonialGroups.map((group, groupIndex) => (
          <div class="mx-auto mt-16 max-w-lg text-sm/6 text-gray-900 sm:mt-20 xl:mx-0 xl:max-w-none">
            <div class="space-y-8 xl:contents xl:space-y-0">
              {Array.isArray(group) &&
                group.map((testimonial, index) => {
                  return (
                    <div
                      class={`space-y-8 ${index === 0 && group.length > 1 ? "xl:row-span-2" : "xl:row-start-1"} max-w-lg m-auto testimonials`}
                    >
                      <figure class="rounded-2xl bg-white p-6 shadow-lg ring-gray-900/5 isolate mb-12">
                        <h3 class="featured">{testimonial.title}</h3>
                        <blockquote class="text-gray-900">
                          {Array.isArray(testimonial.content) ? (
                            testimonial.content.map((paragraph: unknown, pIndex: number) => (
                              <p class={pIndex > 0 ? "mt-8" : ""}>
                                {paragraph}
                              </p>
                            ))
                          ) : (
                            <p>{testimonial.content || "No content available"}</p>
                          )}
                        </blockquote>
                        <figcaption class="mt-6 flex items-center gap-x-4">
                          <img
                            class="size-10 rounded-full bg-gray-50"
                            src={testimonial.photo}
                            alt={`${testimonial.author} testimonial photo`}
                          />
                          <div>
                            <div class="font-semibold">
                              {testimonial.author}
                            </div>
                          </div>
                        </figcaption>
                      </figure>
                    </div>
                  );
                })}
            </div>
          </div>
        ))
      ) : (
        <div class="text-center py-10">
          <p class="text-gray-500">No testimonials available</p>
        </div>
      )}
    </div>
  </div>
</div>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const testimonialElements = document.querySelectorAll('.testimonials');
  
  if (testimonialElements.length > 0) {
    gsap.from(".testimonials", {
      scrollTrigger: {
        trigger: ".testimonials",
        start: "top bottom",
        end: "top center",
        scrub: true,
        markers: false,
      },
      y: 400,
      opacity: 0,
      duration: 1,
    });
  }
</script>
